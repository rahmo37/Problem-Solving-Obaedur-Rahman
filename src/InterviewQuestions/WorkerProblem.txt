//Level 1

Instructions
Your task is to implement a simplified version of a program registering the working hours of contract workers at a facility. All operations that should be supported by this program are described below.

Solving this task consists of several levels. Subsequent levels are opened when the current level is correctly solved. You always have access to the data for the current and all previous levels.

Requirements
Your task is to implement a simplified version of a program registering the working hours of contract workers at a facility. Plan your design according to the level specifications below:

Level 1: The working hours register program should support adding workers to the system, registering the time when workers enter or leave the office and retrieving information about the time spent in the office.
Level 2: The working hours register program should support retrieving statistics about the amount of time that workers spent in the office.
Level 3: The working hours register program should support promoting workers, assigning them new positions and new compensation. The program should also support calculating a worker's salary for a given period.
Level 4: The working hours register program should support setting time periods to be double-paid.
To move to the next level, you need to pass all the tests at this level.

Note

You will receive a list of queries to the system, and the final output should be an array of strings representing the returned values of all queries. Each query will only call one operation.

Level 1
Introduce operations for adding workers, registering their entering or leaving the office and retrieving information about the amount of time that they have worked.

ADD_WORKER <workerId> <position> <compensation> — should add the workerId to the system and save additional information about them: their position and compensation. If the workerId already exists, nothing happens and this operation should return "false". If the workerId was successfully added, return "true". workerId and position are guaranteed to contain only English letters and spaces.

REGISTER <workerId> <timestamp> — should register the time when the workerId entered or left the office. The time is represented by the timestamp. Note that REGISTER operation calls are given in the increasing order of the timestamp parameter. If the workerId doesn't exist within the system, nothing happens and this operation should return "invalid_request". If the workerId is not in the office, this operation registers the time when the workerId entered the office. If the workerId is already in the office, this operation registers the time when the workerId left the office. If the workerId's entering or leaving time was successfully registered, return "registered".

GET <workerId> — should return a string representing the total calculated amount of time that the workerId spent in the office. The amount of time is calculated using finished working sessions only. It means that if the worker has entered the office but hasn't left yet, this visit is not considered in the calculation. If the workerId doesn't exist within the system, return an empty string.

Examples
The example below shows how these operations should work (the section is scrollable to the right):

Queries	Explanations
queries = [
  ["ADD_WORKER", "Ashley", "Middle Developer", "150"],
  ["ADD_WORKER", "Ashley", "Junior Developer", "100"],
  ["REGISTER", "Ashley", "10"],
  ["REGISTER", "Ashley", "25"],
  ["GET", "Ashley"],
  ["REGISTER", "Ashley", "40"],
  ["REGISTER", "Ashley", "67"],
  ["REGISTER", "Ashley", "100"],
  ["GET", "Ashley"],
  ["GET", "Walter"],
  ["REGISTER", "Walter", "120"]
]

returns "true"
returns "false"; the same workerId already exists within the system
returns "registered"; "Ashley" entered the office at timestamp 10
returns "registered"; "Ashley" left the office at timestamp 25
returns "15"; "Ashley" spent 25 - 10 = 15 time units in the office
returns "registered"
returns "registered"
returns "registered"
returns "42"; "Ashley" spent (25 - 10) + (67 - 40) = 42 time units in the office
returns ""; id "Walter" was never added to the system
returns "invalid_request"; "Walter" was never added to the system

the output should be ["true", "false", "registered", "registered", "15", "registered", "registered", "registered", "42", "", "invalid_request"].

Input/Output

[execution time limit] 3 seconds (java)

[memory limit] 1 GB

[input] array.array.string queries

An array of queries to the system. It is guaranteed that all the queries parameters are valid: each query calls one of the operations described in the description, all operation parameters are given in the correct format, and all conditions required for each operation are satisfied.

Guaranteed constraints:
1 ≤ queries.length ≤ 500.

[output] array.string

An array of strings representing the returned values of queries.

[Java] Syntax Tips

// Prints help message to the console
// Returns a string
//
// Globals declared here will cause a compilation error,
// declare variables inside the function instead!
String helloWorld(String name) {
    System.out.println("This prints to the console when you Run Tests");
    return "Hello, " + name;
}


// Level2
Instructions
Your task is to implement a simplified version of a program registering the working hours of contract workers at a facility. All operations that should be supported by this program are described below.

Solving this task consists of several levels. Subsequent levels are opened when the current level is correctly solved. You always have access to the data for the current and all previous levels.

Requirements
Your task is to implement a simplified version of a program registering the working hours of contract workers at a facility. Plan your design according to the level specifications below:

Level 1: The working hours register program should support adding workers to the system, registering the time when workers enter or leave the office and retrieving information about the time spent in the office.

Expand to see level 1 details.
Level 2: The working hours register program should support retrieving statistics about the amount of time that workers spent in the office.

Level 3: The working hours register program should support promoting workers, assigning them new positions and new compensation. The program should also support calculating a worker's salary for a given period.

Level 4: The working hours register program should support setting time periods to be double-paid.

To move to the next level, you need to pass all the tests at this level.

Note

You will receive a list of queries to the system, and the final output should be an array of strings representing the returned values of all queries. Each query will only call one operation.

Level 2
Introduce an operation to retrieve ordered statistics about the workers.

TOP_N_WORKERS <n> <position> — should return the string representing ids of the top n workers with the given position sorted in descending order by the total time spent in the office. The amount of time is calculated using finished working sessions only. In the case of a tie, workers must be sorted in alphabetical order of their ids. The returned string should be in the following format: "workerId1(timeSpentInOffice1), workerId2(timeSpentInOffice2), ..., workerIdN(timeSpentInOfficeN)". If less than n workers with the given position exist within the system, then return all ids in the described format. If there are no workers with the given position within the system, return an empty string. Note that if a worker exists within the system and doesn't have any finished periods of being in the office, their time spent in the office is considered to be 0.
Examples
The example below shows how this operation should work (the section is scrollable to the right):

Queries	Explanations
queries = [
  ["ADD_WORKER", "John", "Junior Developer", "120"],
  ["ADD_WORKER", "Jason", "Junior Developer", "120"],
  ["ADD_WORKER", "Ashley", "Junior Developer", "120"],
  ["REGISTER", "John", "100"],
  ["REGISTER", "John", "150"],
  ["REGISTER", "Jason", "200"],
  ["REGISTER", "Jason", "250"],
  ["REGISTER", "Jason", "275"],
  ["TOP_N_WORKERS", "5", "Junior Developer"],
  ["TOP_N_WORKERS", "1", "Junior Developer"],
  ["REGISTER", "Ashley", "400"],
  ["REGISTER", "Ashley", "500"],
  ["REGISTER", "Jason", "575"],
  ["TOP_N_WORKERS", "3", "Junior Developer"],
  ["TOP_N_WORKERS", "3", "Middle Developer"]
]

returns "true"
returns "true"
returns "true"
returns "registered"
returns "registered"; now "John" has 50 time units spent in the office
returns "registered"
returns "registered"; now "Jason" has 50 time units spent in the office
returns "registered"; "Jason" entered the office at timestamp 275
returns "Jason(50), John(50), Ashley(0)"; "Jason" goes before "John" alphabetically
returns "Jason(50)";
returns "registered"
returns "registered"; now "Ashley" has 100 time units spent in the office
returns "registered"; "Jason" left the office and now has 50 + (575 - 275) = 350 time units spent in the office
returns "Jason(350), Ashley(100), John(50)";
returns ""; there are no workers with position "Middle Developer"

the output should be ["true", "true", "true", "registered", "registered", "registered", "registered", "registered", "Jason(50), John(50), Ashley(0)", "Jason(50)", "registered", "registered", "registered", "Jason(350), Ashley(100), John(50)", ""].

Input/Output

[execution time limit] 3 seconds (java)

[memory limit] 1 GB

[input] array.array.string queries

An array of queries to the system. It is guaranteed that all the queries parameters are valid: each query calls one of the operations described in the description, all operation parameters are given in the correct format, and all conditions required for each operation are satisfied.

Guaranteed constraints:
1 ≤ queries.length ≤ 500.

[output] array.string

An array of strings representing the returned values of queries.

[Java] Syntax Tips

// Prints help message to the console
// Returns a string
//
// Globals declared here will cause a compilation error,
// declare variables inside the function instead!
String helloWorld(String name) {
    System.out.println("This prints to the console when you Run Tests");
    return "Hello, " + name;
}